plugins {
    id "io.gitlab.arturbosch.detekt" version "$detekt_version"
    id "com.android.application"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
    id "kotlin-android"
    id "kotlin-parcelize"
    id "kotlin-kapt"
    id "androidx.navigation.safeargs.kotlin"
    id "dagger.hilt.android.plugin"
    id 'com.google.firebase.firebase-perf'
}

apply from: 'https://raw.githubusercontent.com/Hipo/macaron/master/config/quality/quality.gradle'

def flavorsGradlePath = 'flavors.gradle'
def browsersGradlePath = 'browsers.gradle'
def offrampGradlePath = 'offramp.gradle'
if (project.file(flavorsGradlePath).exists()) {
    apply from: flavorsGradlePath
}
if (project.file(browsersGradlePath).exists()) {
    apply from: browsersGradlePath
}
if (project.file(offrampGradlePath).exists()) {
    apply from: offrampGradlePath
}

android {
    compileSdkVersion targets.compileSdkVersion
    defaultConfig {
        versionCode peraApplication.versionCode
        versionName peraApplication.versionName
        applicationId application.applicationId
        minSdkVersion targets.minSdkVersion
        targetSdkVersion targets.targetSdkVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    signingConfigs {
        releaseLocal {
            def localProps = new Properties()
            try {
                localProps.load(new FileInputStream(file('../local.properties')))
                storeFile file(localProps["RELEASE_STORE_FILE"])
                storePassword localProps["RELEASE_STORE_PASSWORD"]
                keyAlias localProps["RELEASE_KEY_ALIAS"]
                keyPassword localProps["RELEASE_KEY_PASSWORD"]
            } catch (e) {
                println(e)
            }
        }
    }

    buildTypes {
        release {
            // signingConfig signingConfigs.releaseLocal //enable this to sign the release
            multiDexEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [enableCrashReporting: "true", enableFirebasePerformanceLogcat: "false"]
        }

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix " (DEBUG)"
            multiDexEnabled true
            minifyEnabled false
            manifestPlaceholders = [enableCrashReporting: "false", enableFirebasePerformanceLogcat: "true"]
            resValue("string", "app_name", "Pera Wallet (Dev)")
        }
    }

    flavorDimensions "server"
    productFlavors {
        def apiKeyProps = new Properties()
        def apiUrlProps = new Properties()

        staging {
            dimension "server"
            versionNameSuffix " (STAGING)"
            applicationIdSuffix ".staging"
            buildConfigField "String", "APPLICATION_NAME", '"pera"'
            buildConfigField "String", "DEEPLINK_PREFIX", '"algorand://"'

            apiKeyProps.load(new FileInputStream(file('../app/src/staging/api-key.properties')))
            apiUrlProps.load(new FileInputStream(file('../app/src/main/api-url.properties')))

            buildConfigField "String", "ALGORAND_BASE_URL", apiUrlProps["NODE_TESTNET_URL"]
            buildConfigField "String", "ALGORAND_API_KEY", apiKeyProps["ALGORAND_API_KEY"]
            buildConfigField "String", "INDEXER_API_KEY", apiKeyProps["INDEXER_API_KEY"]
            buildConfigField "String", "MOBILE_API_KEY", apiKeyProps["MOBILE_API_KEY"]
            buildConfigField "String", "MOBILE_ALGORAND_MAINNET_BASE_URL", '"https://mainnet.staging.api.perawallet.app/"'
            buildConfigField "String", "MOBILE_ALGORAND_TESTNET_BASE_URL", '"https://testnet.staging.api.perawallet.app/"'
            buildConfigField "String", "PERA_3D_EXPLORER_BASE_URL", '"https://static-hosting.perawallet.app/3dviewer/index.html"'
            buildConfigField "String", "DISCOVER_WEBVIEW_USERNAME", apiKeyProps["DISCOVER_WEBVIEW_USERNAME"]
            buildConfigField "String", "DISCOVER_WEBVIEW_PASSWORD", apiKeyProps["DISCOVER_WEBVIEW_PASSWORD"]
            buildConfigField "String", "DISCOVER_VERSION", "\"${discoverVersions.staging}\""
            buildConfigField "String", "DISCOVER_URL", '"https://discover-mobile-staging.perawallet.app/"'
            buildConfigField "String", "DISCOVER_BROWSE_DAPP_URL", '"https://discover-mobile-staging.perawallet.app/main/browser"'
            buildConfigField "String", "CARDS_URL", '"https://cards-mobile-staging.perawallet.app"'
            buildConfigField "String", "MELD_URL", '"https://mainnet.staging.api.perawallet.app/v1/onramp-services/meld/redirect-to-fluidmoney/?walletAddress="'
            buildConfigField "String", "NODE_MAINNET_URL", apiUrlProps["NODE_MAINNET_URL"]
            buildConfigField "String", "NODE_TESTNET_URL", apiUrlProps["NODE_TESTNET_URL"]
            buildConfigField "String", "INDEXER_MAINNET_URL", apiUrlProps["INDEXER_MAINNET_URL"]
            buildConfigField "String", "INDEXER_TESTNET_URL", apiUrlProps["INDEXER_TESTNET_URL"]
        }

        prod {
            dimension "server"
            buildConfigField "String", "APPLICATION_NAME", '"pera"'
            buildConfigField "String", "DEEPLINK_PREFIX", '"algorand://"'

            apiKeyProps.load(new FileInputStream(file('../app/src/prod/api-key.properties')))
            apiUrlProps.load(new FileInputStream(file('../app/src/main/api-url.properties')))

            buildConfigField "String", "ALGORAND_BASE_URL", apiUrlProps["NODE_MAINNET_URL"]
            buildConfigField "String", "ALGORAND_API_KEY", apiKeyProps["ALGORAND_API_KEY"]
            buildConfigField "String", "INDEXER_API_KEY", apiKeyProps["INDEXER_API_KEY"]
            buildConfigField "String", "MOBILE_API_KEY", apiKeyProps["MOBILE_API_KEY"]
            buildConfigField "String", "MOBILE_ALGORAND_MAINNET_BASE_URL", '"https://mainnet.api.perawallet.app/"'
            buildConfigField "String", "MOBILE_ALGORAND_TESTNET_BASE_URL", '"https://testnet.api.perawallet.app/"'
            buildConfigField "String", "PERA_3D_EXPLORER_BASE_URL", '"https://static-hosting.perawallet.app/3dviewer/index.html"'
            buildConfigField "String", "DISCOVER_WEBVIEW_USERNAME", apiKeyProps["DISCOVER_WEBVIEW_USERNAME"]
            buildConfigField "String", "DISCOVER_WEBVIEW_PASSWORD", apiKeyProps["DISCOVER_WEBVIEW_PASSWORD"]
            buildConfigField "String", "DISCOVER_VERSION", "\"${discoverVersions.prod}\""
            buildConfigField "String", "DISCOVER_URL", '"https://discover-mobile.perawallet.app/"'
            buildConfigField "String", "DISCOVER_BROWSE_DAPP_URL", '"https://discover-mobile.perawallet.app/main/browser"'
            buildConfigField "String", "CARDS_URL", '"https://cards-mobile.perawallet.app"'
            buildConfigField "String", "MELD_URL", '"https://mainnet.api.perawallet.app/v1/onramp-services/meld/redirect-to-fluidmoney/?walletAddress="'
            buildConfigField "String", "NODE_MAINNET_URL", apiUrlProps["NODE_MAINNET_URL"]
            buildConfigField "String", "NODE_TESTNET_URL", apiUrlProps["NODE_TESTNET_URL"]
            buildConfigField "String", "INDEXER_MAINNET_URL", apiUrlProps["INDEXER_MAINNET_URL"]
            buildConfigField "String", "INDEXER_TESTNET_URL", apiUrlProps["INDEXER_TESTNET_URL"]
        }
    }

    kapt {
        correctErrorTypes = true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true

        targetCompatibility = JavaVersion.VERSION_17
        sourceCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    sourceSets {
        // Adds exported schema location as test app assets.
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    buildFeatures {
        viewBinding true
        buildConfig = true
    }
    namespace application.applicationId
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${libVersions.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${libVersions.coroutines}"

    implementation "com.google.android.material:material:${libVersions.material}"
    implementation "com.google.android.flexbox:flexbox:${libVersions.flexbox}"
    implementation "androidx.appcompat:appcompat:${libVersions.appCompat}"
    implementation "androidx.legacy:legacy-support-v4:${libVersions.legacySupport}"
    implementation "androidx.lifecycle:lifecycle-extensions:${libVersions.lifecycleExt}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${libVersions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-common-java8:${libVersions.lifecycle}"
    implementation "androidx.constraintlayout:constraintlayout:${libVersions.constraintLayout}"
    implementation "androidx.core:core-ktx:${libVersions.coreKtx}"

    implementation platform("com.google.firebase:firebase-bom:${libVersions.firebaseBom}")

    implementation "com.google.firebase:firebase-analytics"
    implementation "com.google.firebase:firebase-messaging"
    implementation "com.google.firebase:firebase-crashlytics"
    implementation "com.google.firebase:firebase-perf"

    implementation "androidx.biometric:biometric:${libVersions.biometric}"

    implementation "com.journeyapps:zxing-android-embedded:${libVersions.zxing}"

    implementation "androidx.room:room-runtime:${libVersions.room}"
    implementation "androidx.room:room-ktx:${libVersions.room}"
    kapt "androidx.room:room-compiler:${libVersions.room}"

    implementation "androidx.navigation:navigation-fragment-ktx:${libVersions.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${libVersions.navigation}"

    implementation "no.nordicsemi.android:ble:${libVersions.ble}"

    implementation "androidx.fragment:fragment-ktx:${libVersions.fragment}"

    implementation "androidx.multidex:multidex:${libVersions.multidex}"

    implementation "androidx.browser:browser:${libVersions.browser}"

    implementation "androidx.paging:paging-runtime-ktx:${libVersions.paging}"

    implementation "com.google.crypto.tink:tink-android:${libVersions.tink}"

    implementation "com.google.android.play:review-ktx:${libVersions.review}"

    implementation "com.google.dagger:hilt-android:$dagger_gradle_version"
    kapt "com.google.dagger:hilt-android-compiler:$dagger_gradle_version"

    kapt "androidx.hilt:hilt-compiler:${libVersions.hiltCompiler}"

    implementation "com.github.bumptech.glide:glide:${libVersions.glide}"
    kapt "com.github.bumptech.glide:compiler:${libVersions.glide}"

    implementation "com.airbnb.android:lottie:${libVersions.lottie}"

    implementation "com.squareup.retrofit2:retrofit:${libVersions.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${libVersions.retrofit}"
    implementation "com.squareup.okhttp3:logging-interceptor:${libVersions.okhttp}"

    // Chart
    implementation "com.github.PhilJay:MPAndroidChart:${libVersions.mpAndroidChart}"

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:${libVersions.desugar}"

    // Wallet Connect v1
    implementation "org.java-websocket:Java-WebSocket:${libVersions.javaWebSocket}"
    implementation "com.github.komputing:khex:${libVersions.khex}"
    implementation "com.squareup.moshi:moshi:${libVersions.moshi}"
    implementation "com.squareup.moshi:moshi-kotlin:${libVersions.moshi}"

    // Wallet Connect v2
    implementation(platform("com.walletconnect:android-bom:${libVersions.walletConnectBom}"))
    implementation("com.walletconnect:android-core") {
        exclude group: 'com.jakewharton.timber', module: 'timber'
    }
    implementation "com.walletconnect:sign"
    implementation "com.walletconnect:web3wallet"

    // ExoPlayer
    implementation "com.google.android.exoplayer:exoplayer:${libVersions.exoPlayer}"

    implementation("com.algorand:algosdk:${libVersions.algoSdk}") {
        exclude group: 'org.bouncycastle'
    }

    // Test
    testImplementation "junit:junit:${testLibVersions.junit}"
    androidTestImplementation "androidx.room:room-testing:${libVersions.room}"
    androidTestImplementation "androidx.test:runner:${testLibVersions.runner}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${testLibVersions.espresso}"
}
